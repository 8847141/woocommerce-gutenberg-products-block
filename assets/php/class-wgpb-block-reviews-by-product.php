<?php
/**
 * Display the Reviews by Product block in the post content.
 * NOTE: DO NOT edit this file in WooCommerce core, this is generated from woocommerce-gutenberg-products-block.
 *
 * @package WooCommerce\Blocks
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * Handler for getting top-rated products for display.
 */
class WGPB_Block_Reviews_By_Product {
	/**
	 * Block name.
	 *
	 * @var string
	 */
	protected $block_name = 'reviews-by-product';

	/**
	 * Attributes.
	 *
	 * @var array
	 */
	protected $attributes = array();

	/**
	 * Initialize block.
	 *
	 * @param array $attributes Block attributes. Default empty array.
	 */
	public function __construct( $attributes = array() ) {
		$this->attributes = $this->parse_attributes( $attributes );
	}

	/**
	 * Get the block's attributes.
	 *
	 * @param array $attributes Block attributes.
	 * @return array Block attributes merged with defaults.
	 */
	protected function parse_attributes( $attributes ) {
		if ( $attributes['orderby'] ) {
			$order                 = explode( '-', $attributes['orderby'] );
			$attributes['orderby'] = $order[0];
			if ( count( $order ) > 1 ) {
				$attributes['order'] = $order[1];
			} else {
				$attributes['order'] = 'DESC';
			}
		}

		return $attributes;
	}

	/**
	 * Render the Reviews by Product meta (author and date).
	 *
	 * @param array $comment Comment attributes.
	 */
	public function reviews_display_meta( $comment ) {
		$verified = wc_review_is_from_verified_owner( $comment->comment_ID );

		if ( ! $this->attributes['showReviewerName'] && ! $this->attributes['showReviewDate'] ) {
			return;
		}

		$html = '<p class="meta">';
		if ( $this->attributes['showReviewerName'] ) {
			$html .= '<strong class="woocommerce-review__author">' . get_comment_author() . '</strong>';
			if ( 'yes' === get_option( 'woocommerce_review_rating_verification_label' ) && $verified ) {
				$html .= '<em class="woocommerce-review__verified verified">(' . esc_attr__( 'verified owner', 'woo-gutenberg-products-block' ) . ')</em> ';
			}
		}
		if ( $this->attributes['showReviewerName'] && $this->attributes['showReviewDate'] ) {
			$html .= '<span class="woocommerce-review__dash">&ndash;</span>';
		}
		if ( $this->attributes['showReviewDate'] ) {
			$html .= '<time class="woocommerce-review__published-date" datetime="' . esc_attr( get_comment_date( 'c' ) ) . '">' . esc_html( get_comment_date( wc_date_format() ) ) . '</time>';
		}
		$html .= '</p>';

		echo $html; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
	}

	/**
	 * Render the Reviews by Product.
	 *
	 * @return string Rendered block type output.
	 */
	public function render() {
		$product = wc_get_product( $this->attributes['productId'] );
		if ( ! $product ) {
			return '<h2>No product found</h2>';
		}
		$review_count = $product->get_review_count();
		if ( 0 === $review_count ) {
			return '<h2>Product with no reviews</h2>';
		}
		$comments = get_comments(
			array(
				'number'   => $this->attributes['reviewsShown'],
				'order_by' => $this->attributes['orderby'],
				'order'    => $this->attributes['order'],
				'post_id'  => $this->attributes['productId'],
				'status'   => 'approve',
				'type'     => 'review',
			)
		);
		$args     = array(
			'callback' => 'woocommerce_comments',
			'echo'     => false,
		);
		remove_action( 'woocommerce_review_meta', 'woocommerce_review_display_meta', 10 );
		add_action( 'woocommerce_review_meta', array( $this, 'reviews_display_meta' ), 10 );
		if ( ! $this->attributes['showProductRating'] ) {
			remove_action( 'woocommerce_review_before_comment_meta', 'woocommerce_review_display_rating', 10 );
		}
		if ( ! $this->attributes['showReviewerPicture'] ) {
			remove_action( 'woocommerce_review_before', 'woocommerce_review_display_gravatar', 10 );
		}
		$list_comments = wp_list_comments( apply_filters( 'woocommerce_product_review_list_args', $args ), $comments );
		add_action( 'woocommerce_review_meta', 'woocommerce_review_display_meta', 10 );
		remove_action( 'woocommerce_review_meta', array( $this, 'reviews_display_meta' ), 10 );
		if ( ! $this->attributes['showProductRating'] ) {
			add_action( 'woocommerce_review_before_comment_meta', 'woocommerce_review_display_rating', 10 );
		}
		if ( ! $this->attributes['showReviewerPicture'] ) {
			add_action( 'woocommerce_review_before', 'woocommerce_review_display_gravatar', 10 );
		}
		return '<div id="reviews"><ol class="commentlist">' . $list_comments . '</ol></div>';
	}
}
